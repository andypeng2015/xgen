///====---- Dump region '.program' ----====
region program @".program" () {

var byte:u8:(align(4));
var word:u32:(align(4));
var aes_ret:i16:(align(4));
var aes:mc<524>:(align(4));
var set_key:i16:(func_decl,align(4));
var encrypt:i16:(func_decl,align(4));
var decrypt:i16:(func_decl,align(4));
var set_blk:i16:(func_decl,align(4));
var s_box:mc<256>:(array,align(4));
var inv_s_box:mc<256>:(array,align(4));
var rcon_tab:mc<116>:(array,align(4));
var ft_tab:mc<4096>:(array,align(4));
var it_tab:mc<4096>:(array,align(4));
var fl_tab:mc<4096>:(array,align(4));
var il_tab:mc<4096>:(array,align(4));
var im_tab:mc<4096>:(array,align(4));
var encrypt:i16:(func_decl,align(4));
var set_key:i16:(func_decl,align(4));
var decrypt:i16:(func_decl,align(4));
var @"#DedicatedStringVar":str:(unallocable,align(4),string("DedicatedVarBeRegardedAsString"));
 
//====---- Dump region 'set_key' ----====
region func set_key (undefined,var in_key:*<1>:(align(4)),var n_bytes:u32:(align(4)),var f:i32:(align(4)),var cx:*<524>:(align(4))) {

    var kf:*<4>:(align(4));
    var kt:*<4>:(align(4));
    var rci:u32:(align(4));
    var i:u32:(align(4));
    stpr $57:u32 = 
        band:u32 
            ld:u32 n_bytes, 0x7:i32;
    truebr (
        ne:bool 
            $57:u32, 0:u32), _L27;
    truebr (
        lt:bool 
            ld:u32 n_bytes, 0x10:i32), _L27;
    truebr (
        gt:bool 
            ld:u32 n_bytes, 0x20:i32), _L27;
    stpr $58:i32 = 
        band:i32 
            ld:i32 f, 0x1:i32;
    truebr (
        ne:bool 
            $58:i32, 0x0:i32), _L7;
    stpr $59:i32 = 
        band:i32 
            ld:i32 f, 0x2:i32;
    truebr (
        ne:bool 
            $59:i32, 0x0:i32), _L7;
    label _L27;
    stpr $60:u8 = 
        ild:u8:520 
            ld:*<524> cx;
    ist:u8:520 = 
        ld:*<524> cx,
        band:i32 
            $60:u8, 0xfffffffffffffffc:i32;
    stpr $61:bool = 
        ne:bool 
            ld:u32 n_bytes, 0:u32;
    stpr $63:u32 = 
        ild:u32 
            ld:*<524> cx;
    stpr $64:u32 = 
        lsl:u32 
            $63:u32, 0x2:i32;
    stpr $65:i32 = 
        cvt:i32 
            $64:u32;
    falsebr (
        ne:bool 
            $61:bool, 0:bool), _L28;
    stpr $62:i32 = 0x0:i32;
    goto _L29;
    label _L28;
    stpr $62:i32 = 
        $65:i32;
    label _L29;
    return 
        $62:i32;
    label _L7;
    stpr $66:u8 = 
        ild:u8:520 
            ld:*<524> cx;
    stpr $67:i32 = 
        band:i32 
            $66:u8, 0xfffffffffffffffc:i32;
    stpr $68:u8 = 
        cvt:u8 
            ld:i32 f;
    stpr $69:i32 = 
        band:i32 
            $68:u8, 0x3:i32;
    ist:u8:520 = 
        ld:*<524> cx,
        bor:i32 
            $67:i32, 
            $69:i32;
    ist:u32 = 
        ld:*<524> cx,
        lsr:u32 
            ld:u32 n_bytes, 0x2:i32;
    stpr $70:u32 = 
        ild:u32 
            ld:*<524> cx;
    stpr $71:bool = 
        gt:bool 
            $70:u32, 0x4:i32;
    stpr $73:u32 = 
        ild:u32 
            ld:*<524> cx;
    stpr $74:i32 = 
        cvt:i32 
            $73:u32;
    falsebr (
        ne:bool 
            $71:bool, 0:bool), _L30;
    stpr $72:u32 = 
        $74:i32;
    goto _L31;
    label _L30;
    stpr $72:u32 = 0x4:i32;
    label _L31;
    ist:u32:4 = 
        ld:*<524> cx,
        add:u32 
            $72:u32, 0x6:i32;
    stpr $75:*<4> = 
        cvt:*<4> 
            ld:*<1> in_key;
    stpr $76:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $77:u32 = 
        mul:u32 0x0:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $76:*<524>, 
            $77:u32,
        ild:u32 
            $75:*<4>;
    stpr $78:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 0x4:i32;
    stpr $79:*<4> = 
        cvt:*<4> 
            $78:*<1>;
    stpr $80:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $81:u32 = 
        mul:u32 0x1:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $80:*<524>, 
            $81:u32,
        ild:u32 
            $79:*<4>;
    stpr $82:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 0x8:i32;
    stpr $83:*<4> = 
        cvt:*<4> 
            $82:*<1>;
    stpr $84:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $85:u32 = 
        mul:u32 0x2:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $84:*<524>, 
            $85:u32,
        ild:u32 
            $83:*<4>;
    stpr $86:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 0xc:i32;
    stpr $87:*<4> = 
        cvt:*<4> 
            $86:*<1>;
    stpr $88:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $89:u32 = 
        mul:u32 0x3:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $88:*<524>, 
            $89:u32,
        ild:u32 
            $87:*<4>;
    st:*<4> kf = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $90:u32 = 
        ild:u32:4 
            ld:*<524> cx;
    stpr $91:u32 = 
        add:u32 
            $90:u32, 0x1:i32;
    stpr $92:u32 = 
        mul:u32 
            $91:u32, 16:u32;
    stpr $93:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $92:u32;
    stpr $94:u32 = 
        ild:u32 
            ld:*<524> cx;
    stpr $95:u32 = 
        mul:u32 
            $94:u32, 4:u32;
    st:*<4> kt = 
        sub:*<4> 
            $93:*<4>, 
            $95:u32;
    st:u32 rci = 0x0:i32;
    stpr $29:u32 = 
        ild:u32 
            ld:*<524> cx;
    truebr (
        eq:bool 
            $29:u32, 0x4:i64), _L1;
    label _L9;
    truebr (
        eq:bool 
            $29:u32, 0x6:i64), _L2;
    label _L11;
    falsebr (
        eq:bool 
            $29:u32, 0x8:i64), _L8;
    goto _L3;
    label _L14;
    label _L12;
    label _L10;
    label _L1;
    label _L15;
    stpr $30:u32 = 
        ld:u32 rci;
    stpr $96:i32 = 
        mul:i32 0x4:i32, 0x4:i32;
    stpr $97:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $96:i32;
    stpr $98:i32 = 
        mul:i32 0x0:i32, 0x4:i32;
    stpr $99:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $98:i32;
    stpr $100:u32 = 
        ild:u32 
            $99:*<4>;
    stpr $101:i32 = 
        mul:i32 0x3:i32, 0x4:i32;
    stpr $102:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $101:i32;
    stpr $103:u32 = 
        ild:u32 
            $102:*<4>;
    stpr $104:i32 = 
        sub:i32 0x0:i32, 0x3:i32;
    stpr $105:i32 = 
        band:i32 
            $104:i32, 0x3:i32;
    stpr $106:i32 = 
        mul:i32 
            $105:i32, 0x8:i32;
    stpr $107:u32 = 
        lsr:u32 
            $103:u32, 
            $106:i32;
    stpr $108:u8 = 
        cvt:u8 
            $107:u32;
    stpr $109:u32 = 
        add:u32 
            $108:u8, 0:u32;
    stpr $110:u32 = 
        mul:u32 
            $109:u32, 4:u32;
    stpr $111:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $110:u32;
    stpr $112:u32 = 
        ild:u32 
            $111:*<4>;
    stpr $113:i32 = 
        mul:i32 0x3:i32, 0x4:i32;
    stpr $114:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $113:i32;
    stpr $115:u32 = 
        ild:u32 
            $114:*<4>;
    stpr $116:i32 = 
        sub:i32 0x1:i32, 0x3:i32;
    stpr $117:i32 = 
        band:i32 
            $116:i32, 0x3:i32;
    stpr $118:i32 = 
        mul:i32 
            $117:i32, 0x8:i32;
    stpr $119:u32 = 
        lsr:u32 
            $115:u32, 
            $118:i32;
    stpr $120:u8 = 
        cvt:u8 
            $119:u32;
    stpr $121:u32 = 
        add:u32 
            $120:u8, 256:u32;
    stpr $122:u32 = 
        mul:u32 
            $121:u32, 4:u32;
    stpr $123:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $122:u32;
    stpr $124:u32 = 
        ild:u32 
            $123:*<4>;
    stpr $125:u32 = 
        xor:u32 
            $112:u32, 
            $124:u32;
    stpr $126:i32 = 
        mul:i32 0x3:i32, 0x4:i32;
    stpr $127:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $126:i32;
    stpr $128:u32 = 
        ild:u32 
            $127:*<4>;
    stpr $129:i32 = 
        sub:i32 0x2:i32, 0x3:i32;
    stpr $130:i32 = 
        band:i32 
            $129:i32, 0x3:i32;
    stpr $131:i32 = 
        mul:i32 
            $130:i32, 0x8:i32;
    stpr $132:u32 = 
        lsr:u32 
            $128:u32, 
            $131:i32;
    stpr $133:u8 = 
        cvt:u8 
            $132:u32;
    stpr $134:u32 = 
        add:u32 
            $133:u8, 512:u32;
    stpr $135:u32 = 
        mul:u32 
            $134:u32, 4:u32;
    stpr $136:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $135:u32;
    stpr $137:u32 = 
        ild:u32 
            $136:*<4>;
    stpr $138:u32 = 
        xor:u32 
            $125:u32, 
            $137:u32;
    stpr $139:i32 = 
        mul:i32 0x3:i32, 0x4:i32;
    stpr $140:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $139:i32;
    stpr $141:u32 = 
        ild:u32 
            $140:*<4>;
    stpr $142:i32 = 
        sub:i32 0x3:i32, 0x3:i32;
    stpr $143:i32 = 
        band:i32 
            $142:i32, 0x3:i32;
    stpr $144:i32 = 
        mul:i32 
            $143:i32, 0x8:i32;
    stpr $145:u32 = 
        lsr:u32 
            $141:u32, 
            $144:i32;
    stpr $146:u8 = 
        cvt:u8 
            $145:u32;
    stpr $147:u32 = 
        add:u32 
            $146:u8, 768:u32;
    stpr $148:u32 = 
        mul:u32 
            $147:u32, 4:u32;
    stpr $149:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $148:u32;
    stpr $150:u32 = 
        ild:u32 
            $149:*<4>;
    stpr $151:u32 = 
        xor:u32 
            $138:u32, 
            $150:u32;
    stpr $152:u32 = 
        xor:u32 
            $100:u32, 
            $151:u32;
    stpr $153:u32 = 
        mul:u32 
            $30:u32, 4:u32;
    stpr $154:*<4> = 
        add:*<4> 
            lda rcon_tab, 
            $153:u32;
    stpr $155:u32 = 
        ild:u32 
            $154:*<4>;
    ist:u32 = 
        $97:*<4>,
        xor:u32 
            $152:u32, 
            $155:u32;
    st:u32 rci = 
        add:u32 
            ld:u32 rci, 1:u32;
    stpr $156:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $157:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $156:i32;
    stpr $158:i32 = 
        mul:i32 0x1:i32, 0x4:i32;
    stpr $159:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $158:i32;
    stpr $160:u32 = 
        ild:u32 
            $159:*<4>;
    stpr $161:i32 = 
        mul:i32 0x4:i32, 0x4:i32;
    stpr $162:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $161:i32;
    stpr $163:u32 = 
        ild:u32 
            $162:*<4>;
    ist:u32 = 
        $157:*<4>,
        xor:u32 
            $160:u32, 
            $163:u32;
    stpr $164:i32 = 
        mul:i32 0x6:i32, 0x4:i32;
    stpr $165:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $164:i32;
    stpr $166:i32 = 
        mul:i32 0x2:i32, 0x4:i32;
    stpr $167:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $166:i32;
    stpr $168:u32 = 
        ild:u32 
            $167:*<4>;
    stpr $169:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $170:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $169:i32;
    stpr $171:u32 = 
        ild:u32 
            $170:*<4>;
    ist:u32 = 
        $165:*<4>,
        xor:u32 
            $168:u32, 
            $171:u32;
    stpr $172:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $173:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $172:i32;
    stpr $174:i32 = 
        mul:i32 0x3:i32, 0x4:i32;
    stpr $175:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $174:i32;
    stpr $176:u32 = 
        ild:u32 
            $175:*<4>;
    stpr $177:i32 = 
        mul:i32 0x6:i32, 0x4:i32;
    stpr $178:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $177:i32;
    stpr $179:u32 = 
        ild:u32 
            $178:*<4>;
    ist:u32 = 
        $173:*<4>,
        xor:u32 
            $176:u32, 
            $179:u32;
    stpr $180:i32 = 
        mul:i32 0x4:i32, 0x4:i32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 
            $180:i32;
    label _L17;
    truebr (
        lt:bool 
            ld:*<4> kf, 
            ld:*<4> kt), _L15;
    label _L16;
    goto _L8;
    label _L2;
    stpr $181:i32 = 
        mul:i32 0x10:i32, 0x1:i32;
    stpr $182:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 
            $181:i32;
    stpr $183:*<4> = 
        cvt:*<4> 
            $182:*<1>;
    stpr $184:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $185:u32 = 
        mul:u32 0x4:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $184:*<524>, 
            $185:u32,
        ild:u32 
            $183:*<4>;
    stpr $186:i32 = 
        mul:i32 0x14:i32, 0x1:i32;
    stpr $187:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 
            $186:i32;
    stpr $188:*<4> = 
        cvt:*<4> 
            $187:*<1>;
    stpr $189:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $190:u32 = 
        mul:u32 0x5:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $189:*<524>, 
            $190:u32,
        ild:u32 
            $188:*<4>;
    label _L18;
    stpr $31:u32 = 
        ld:u32 rci;
    stpr $191:i32 = 
        mul:i32 0x6:i32, 0x4:i32;
    stpr $192:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $191:i32;
    stpr $193:i32 = 
        mul:i32 0x0:i32, 0x4:i32;
    stpr $194:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $193:i32;
    stpr $195:u32 = 
        ild:u32 
            $194:*<4>;
    stpr $196:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $197:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $196:i32;
    stpr $198:u32 = 
        ild:u32 
            $197:*<4>;
    stpr $199:i32 = 
        sub:i32 0x0:i32, 0x3:i32;
    stpr $200:i32 = 
        band:i32 
            $199:i32, 0x3:i32;
    stpr $201:i32 = 
        mul:i32 
            $200:i32, 0x8:i32;
    stpr $202:u32 = 
        lsr:u32 
            $198:u32, 
            $201:i32;
    stpr $203:u8 = 
        cvt:u8 
            $202:u32;
    stpr $204:u32 = 
        add:u32 
            $203:u8, 0:u32;
    stpr $205:u32 = 
        mul:u32 
            $204:u32, 4:u32;
    stpr $206:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $205:u32;
    stpr $207:u32 = 
        ild:u32 
            $206:*<4>;
    stpr $208:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $209:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $208:i32;
    stpr $210:u32 = 
        ild:u32 
            $209:*<4>;
    stpr $211:i32 = 
        sub:i32 0x1:i32, 0x3:i32;
    stpr $212:i32 = 
        band:i32 
            $211:i32, 0x3:i32;
    stpr $213:i32 = 
        mul:i32 
            $212:i32, 0x8:i32;
    stpr $214:u32 = 
        lsr:u32 
            $210:u32, 
            $213:i32;
    stpr $215:u8 = 
        cvt:u8 
            $214:u32;
    stpr $216:u32 = 
        add:u32 
            $215:u8, 256:u32;
    stpr $217:u32 = 
        mul:u32 
            $216:u32, 4:u32;
    stpr $218:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $217:u32;
    stpr $219:u32 = 
        ild:u32 
            $218:*<4>;
    stpr $220:u32 = 
        xor:u32 
            $207:u32, 
            $219:u32;
    stpr $221:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $222:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $221:i32;
    stpr $223:u32 = 
        ild:u32 
            $222:*<4>;
    stpr $224:i32 = 
        sub:i32 0x2:i32, 0x3:i32;
    stpr $225:i32 = 
        band:i32 
            $224:i32, 0x3:i32;
    stpr $226:i32 = 
        mul:i32 
            $225:i32, 0x8:i32;
    stpr $227:u32 = 
        lsr:u32 
            $223:u32, 
            $226:i32;
    stpr $228:u8 = 
        cvt:u8 
            $227:u32;
    stpr $229:u32 = 
        add:u32 
            $228:u8, 512:u32;
    stpr $230:u32 = 
        mul:u32 
            $229:u32, 4:u32;
    stpr $231:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $230:u32;
    stpr $232:u32 = 
        ild:u32 
            $231:*<4>;
    stpr $233:u32 = 
        xor:u32 
            $220:u32, 
            $232:u32;
    stpr $234:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $235:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $234:i32;
    stpr $236:u32 = 
        ild:u32 
            $235:*<4>;
    stpr $237:i32 = 
        sub:i32 0x3:i32, 0x3:i32;
    stpr $238:i32 = 
        band:i32 
            $237:i32, 0x3:i32;
    stpr $239:i32 = 
        mul:i32 
            $238:i32, 0x8:i32;
    stpr $240:u32 = 
        lsr:u32 
            $236:u32, 
            $239:i32;
    stpr $241:u8 = 
        cvt:u8 
            $240:u32;
    stpr $242:u32 = 
        add:u32 
            $241:u8, 768:u32;
    stpr $243:u32 = 
        mul:u32 
            $242:u32, 4:u32;
    stpr $244:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $243:u32;
    stpr $245:u32 = 
        ild:u32 
            $244:*<4>;
    stpr $246:u32 = 
        xor:u32 
            $233:u32, 
            $245:u32;
    stpr $247:u32 = 
        xor:u32 
            $195:u32, 
            $246:u32;
    stpr $248:u32 = 
        mul:u32 
            $31:u32, 4:u32;
    stpr $249:*<4> = 
        add:*<4> 
            lda rcon_tab, 
            $248:u32;
    stpr $250:u32 = 
        ild:u32 
            $249:*<4>;
    ist:u32 = 
        $192:*<4>,
        xor:u32 
            $247:u32, 
            $250:u32;
    st:u32 rci = 
        add:u32 
            ld:u32 rci, 1:u32;
    stpr $251:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $252:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $251:i32;
    stpr $253:i32 = 
        mul:i32 0x1:i32, 0x4:i32;
    stpr $254:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $253:i32;
    stpr $255:u32 = 
        ild:u32 
            $254:*<4>;
    stpr $256:i32 = 
        mul:i32 0x6:i32, 0x4:i32;
    stpr $257:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $256:i32;
    stpr $258:u32 = 
        ild:u32 
            $257:*<4>;
    ist:u32 = 
        $252:*<4>,
        xor:u32 
            $255:u32, 
            $258:u32;
    stpr $259:i32 = 
        mul:i32 0x8:i32, 0x4:i32;
    stpr $260:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $259:i32;
    stpr $261:i32 = 
        mul:i32 0x2:i32, 0x4:i32;
    stpr $262:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $261:i32;
    stpr $263:u32 = 
        ild:u32 
            $262:*<4>;
    stpr $264:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $265:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $264:i32;
    stpr $266:u32 = 
        ild:u32 
            $265:*<4>;
    ist:u32 = 
        $260:*<4>,
        xor:u32 
            $263:u32, 
            $266:u32;
    stpr $267:i32 = 
        mul:i32 0x9:i32, 0x4:i32;
    stpr $268:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $267:i32;
    stpr $269:i32 = 
        mul:i32 0x3:i32, 0x4:i32;
    stpr $270:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $269:i32;
    stpr $271:u32 = 
        ild:u32 
            $270:*<4>;
    stpr $272:i32 = 
        mul:i32 0x8:i32, 0x4:i32;
    stpr $273:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $272:i32;
    stpr $274:u32 = 
        ild:u32 
            $273:*<4>;
    ist:u32 = 
        $268:*<4>,
        xor:u32 
            $271:u32, 
            $274:u32;
    stpr $275:i32 = 
        mul:i32 0xa:i32, 0x4:i32;
    stpr $276:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $275:i32;
    stpr $277:i32 = 
        mul:i32 0x4:i32, 0x4:i32;
    stpr $278:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $277:i32;
    stpr $279:u32 = 
        ild:u32 
            $278:*<4>;
    stpr $280:i32 = 
        mul:i32 0x9:i32, 0x4:i32;
    stpr $281:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $280:i32;
    stpr $282:u32 = 
        ild:u32 
            $281:*<4>;
    ist:u32 = 
        $276:*<4>,
        xor:u32 
            $279:u32, 
            $282:u32;
    stpr $283:i32 = 
        mul:i32 0xb:i32, 0x4:i32;
    stpr $284:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $283:i32;
    stpr $285:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $286:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $285:i32;
    stpr $287:u32 = 
        ild:u32 
            $286:*<4>;
    stpr $288:i32 = 
        mul:i32 0xa:i32, 0x4:i32;
    stpr $289:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $288:i32;
    stpr $290:u32 = 
        ild:u32 
            $289:*<4>;
    ist:u32 = 
        $284:*<4>,
        xor:u32 
            $287:u32, 
            $290:u32;
    stpr $291:i32 = 
        mul:i32 0x6:i32, 0x4:i32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 
            $291:i32;
    label _L20;
    truebr (
        lt:bool 
            ld:*<4> kf, 
            ld:*<4> kt), _L18;
    label _L19;
    goto _L8;
    label _L3;
    stpr $292:i32 = 
        mul:i32 0x10:i32, 0x1:i32;
    stpr $293:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 
            $292:i32;
    stpr $294:*<4> = 
        cvt:*<4> 
            $293:*<1>;
    stpr $295:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $296:u32 = 
        mul:u32 0x4:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $295:*<524>, 
            $296:u32,
        ild:u32 
            $294:*<4>;
    stpr $297:i32 = 
        mul:i32 0x14:i32, 0x1:i32;
    stpr $298:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 
            $297:i32;
    stpr $299:*<4> = 
        cvt:*<4> 
            $298:*<1>;
    stpr $300:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $301:u32 = 
        mul:u32 0x5:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $300:*<524>, 
            $301:u32,
        ild:u32 
            $299:*<4>;
    stpr $302:i32 = 
        mul:i32 0x18:i32, 0x1:i32;
    stpr $303:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 
            $302:i32;
    stpr $304:*<4> = 
        cvt:*<4> 
            $303:*<1>;
    stpr $305:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $306:u32 = 
        mul:u32 0x6:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $305:*<524>, 
            $306:u32,
        ild:u32 
            $304:*<4>;
    stpr $307:i32 = 
        mul:i32 0x1c:i32, 0x1:i32;
    stpr $308:*<1> = 
        add:*<1> 
            ld:*<1> in_key, 
            $307:i32;
    stpr $309:*<4> = 
        cvt:*<4> 
            $308:*<1>;
    stpr $310:*<524> = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $311:u32 = 
        mul:u32 0x7:i32, 4:u32;
    ist:u32 = 
        add:*<4> 
            $310:*<524>, 
            $311:u32,
        ild:u32 
            $309:*<4>;
    label _L21;
    stpr $32:u32 = 
        ld:u32 rci;
    stpr $312:i32 = 
        mul:i32 0x8:i32, 0x4:i32;
    stpr $313:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $312:i32;
    stpr $314:i32 = 
        mul:i32 0x0:i32, 0x4:i32;
    stpr $315:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $314:i32;
    stpr $316:u32 = 
        ild:u32 
            $315:*<4>;
    stpr $317:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $318:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $317:i32;
    stpr $319:u32 = 
        ild:u32 
            $318:*<4>;
    stpr $320:i32 = 
        sub:i32 0x0:i32, 0x3:i32;
    stpr $321:i32 = 
        band:i32 
            $320:i32, 0x3:i32;
    stpr $322:i32 = 
        mul:i32 
            $321:i32, 0x8:i32;
    stpr $323:u32 = 
        lsr:u32 
            $319:u32, 
            $322:i32;
    stpr $324:u8 = 
        cvt:u8 
            $323:u32;
    stpr $325:u32 = 
        add:u32 
            $324:u8, 0:u32;
    stpr $326:u32 = 
        mul:u32 
            $325:u32, 4:u32;
    stpr $327:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $326:u32;
    stpr $328:u32 = 
        ild:u32 
            $327:*<4>;
    stpr $329:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $330:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $329:i32;
    stpr $331:u32 = 
        ild:u32 
            $330:*<4>;
    stpr $332:i32 = 
        sub:i32 0x1:i32, 0x3:i32;
    stpr $333:i32 = 
        band:i32 
            $332:i32, 0x3:i32;
    stpr $334:i32 = 
        mul:i32 
            $333:i32, 0x8:i32;
    stpr $335:u32 = 
        lsr:u32 
            $331:u32, 
            $334:i32;
    stpr $336:u8 = 
        cvt:u8 
            $335:u32;
    stpr $337:u32 = 
        add:u32 
            $336:u8, 256:u32;
    stpr $338:u32 = 
        mul:u32 
            $337:u32, 4:u32;
    stpr $339:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $338:u32;
    stpr $340:u32 = 
        ild:u32 
            $339:*<4>;
    stpr $341:u32 = 
        xor:u32 
            $328:u32, 
            $340:u32;
    stpr $342:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $343:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $342:i32;
    stpr $344:u32 = 
        ild:u32 
            $343:*<4>;
    stpr $345:i32 = 
        sub:i32 0x2:i32, 0x3:i32;
    stpr $346:i32 = 
        band:i32 
            $345:i32, 0x3:i32;
    stpr $347:i32 = 
        mul:i32 
            $346:i32, 0x8:i32;
    stpr $348:u32 = 
        lsr:u32 
            $344:u32, 
            $347:i32;
    stpr $349:u8 = 
        cvt:u8 
            $348:u32;
    stpr $350:u32 = 
        add:u32 
            $349:u8, 512:u32;
    stpr $351:u32 = 
        mul:u32 
            $350:u32, 4:u32;
    stpr $352:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $351:u32;
    stpr $353:u32 = 
        ild:u32 
            $352:*<4>;
    stpr $354:u32 = 
        xor:u32 
            $341:u32, 
            $353:u32;
    stpr $355:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $356:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $355:i32;
    stpr $357:u32 = 
        ild:u32 
            $356:*<4>;
    stpr $358:i32 = 
        sub:i32 0x3:i32, 0x3:i32;
    stpr $359:i32 = 
        band:i32 
            $358:i32, 0x3:i32;
    stpr $360:i32 = 
        mul:i32 
            $359:i32, 0x8:i32;
    stpr $361:u32 = 
        lsr:u32 
            $357:u32, 
            $360:i32;
    stpr $362:u8 = 
        cvt:u8 
            $361:u32;
    stpr $363:u32 = 
        add:u32 
            $362:u8, 768:u32;
    stpr $364:u32 = 
        mul:u32 
            $363:u32, 4:u32;
    stpr $365:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $364:u32;
    stpr $366:u32 = 
        ild:u32 
            $365:*<4>;
    stpr $367:u32 = 
        xor:u32 
            $354:u32, 
            $366:u32;
    stpr $368:u32 = 
        xor:u32 
            $316:u32, 
            $367:u32;
    stpr $369:u32 = 
        mul:u32 
            $32:u32, 4:u32;
    stpr $370:*<4> = 
        add:*<4> 
            lda rcon_tab, 
            $369:u32;
    stpr $371:u32 = 
        ild:u32 
            $370:*<4>;
    ist:u32 = 
        $313:*<4>,
        xor:u32 
            $368:u32, 
            $371:u32;
    st:u32 rci = 
        add:u32 
            ld:u32 rci, 1:u32;
    stpr $372:i32 = 
        mul:i32 0x9:i32, 0x4:i32;
    stpr $373:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $372:i32;
    stpr $374:i32 = 
        mul:i32 0x1:i32, 0x4:i32;
    stpr $375:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $374:i32;
    stpr $376:u32 = 
        ild:u32 
            $375:*<4>;
    stpr $377:i32 = 
        mul:i32 0x8:i32, 0x4:i32;
    stpr $378:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $377:i32;
    stpr $379:u32 = 
        ild:u32 
            $378:*<4>;
    ist:u32 = 
        $373:*<4>,
        xor:u32 
            $376:u32, 
            $379:u32;
    stpr $380:i32 = 
        mul:i32 0xa:i32, 0x4:i32;
    stpr $381:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $380:i32;
    stpr $382:i32 = 
        mul:i32 0x2:i32, 0x4:i32;
    stpr $383:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $382:i32;
    stpr $384:u32 = 
        ild:u32 
            $383:*<4>;
    stpr $385:i32 = 
        mul:i32 0x9:i32, 0x4:i32;
    stpr $386:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $385:i32;
    stpr $387:u32 = 
        ild:u32 
            $386:*<4>;
    ist:u32 = 
        $381:*<4>,
        xor:u32 
            $384:u32, 
            $387:u32;
    stpr $388:i32 = 
        mul:i32 0xb:i32, 0x4:i32;
    stpr $389:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $388:i32;
    stpr $390:i32 = 
        mul:i32 0x3:i32, 0x4:i32;
    stpr $391:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $390:i32;
    stpr $392:u32 = 
        ild:u32 
            $391:*<4>;
    stpr $393:i32 = 
        mul:i32 0xa:i32, 0x4:i32;
    stpr $394:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $393:i32;
    stpr $395:u32 = 
        ild:u32 
            $394:*<4>;
    ist:u32 = 
        $389:*<4>,
        xor:u32 
            $392:u32, 
            $395:u32;
    stpr $396:i32 = 
        mul:i32 0xc:i32, 0x4:i32;
    stpr $397:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $396:i32;
    stpr $398:i32 = 
        mul:i32 0x4:i32, 0x4:i32;
    stpr $399:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $398:i32;
    stpr $400:u32 = 
        ild:u32 
            $399:*<4>;
    stpr $401:i32 = 
        mul:i32 0xb:i32, 0x4:i32;
    stpr $402:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $401:i32;
    stpr $403:u32 = 
        ild:u32 
            $402:*<4>;
    stpr $404:i32 = 
        sub:i32 0x0:i32, 0x0:i32;
    stpr $405:i32 = 
        band:i32 
            $404:i32, 0x3:i32;
    stpr $406:i32 = 
        mul:i32 
            $405:i32, 0x8:i32;
    stpr $407:u32 = 
        lsr:u32 
            $403:u32, 
            $406:i32;
    stpr $408:u8 = 
        cvt:u8 
            $407:u32;
    stpr $409:u32 = 
        add:u32 
            $408:u8, 0:u32;
    stpr $410:u32 = 
        mul:u32 
            $409:u32, 4:u32;
    stpr $411:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $410:u32;
    stpr $412:u32 = 
        ild:u32 
            $411:*<4>;
    stpr $413:i32 = 
        mul:i32 0xb:i32, 0x4:i32;
    stpr $414:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $413:i32;
    stpr $415:u32 = 
        ild:u32 
            $414:*<4>;
    stpr $416:i32 = 
        sub:i32 0x1:i32, 0x0:i32;
    stpr $417:i32 = 
        band:i32 
            $416:i32, 0x3:i32;
    stpr $418:i32 = 
        mul:i32 
            $417:i32, 0x8:i32;
    stpr $419:u32 = 
        lsr:u32 
            $415:u32, 
            $418:i32;
    stpr $420:u8 = 
        cvt:u8 
            $419:u32;
    stpr $421:u32 = 
        add:u32 
            $420:u8, 256:u32;
    stpr $422:u32 = 
        mul:u32 
            $421:u32, 4:u32;
    stpr $423:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $422:u32;
    stpr $424:u32 = 
        ild:u32 
            $423:*<4>;
    stpr $425:u32 = 
        xor:u32 
            $412:u32, 
            $424:u32;
    stpr $426:i32 = 
        mul:i32 0xb:i32, 0x4:i32;
    stpr $427:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $426:i32;
    stpr $428:u32 = 
        ild:u32 
            $427:*<4>;
    stpr $429:i32 = 
        sub:i32 0x2:i32, 0x0:i32;
    stpr $430:i32 = 
        band:i32 
            $429:i32, 0x3:i32;
    stpr $431:i32 = 
        mul:i32 
            $430:i32, 0x8:i32;
    stpr $432:u32 = 
        lsr:u32 
            $428:u32, 
            $431:i32;
    stpr $433:u8 = 
        cvt:u8 
            $432:u32;
    stpr $434:u32 = 
        add:u32 
            $433:u8, 512:u32;
    stpr $435:u32 = 
        mul:u32 
            $434:u32, 4:u32;
    stpr $436:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $435:u32;
    stpr $437:u32 = 
        ild:u32 
            $436:*<4>;
    stpr $438:u32 = 
        xor:u32 
            $425:u32, 
            $437:u32;
    stpr $439:i32 = 
        mul:i32 0xb:i32, 0x4:i32;
    stpr $440:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $439:i32;
    stpr $441:u32 = 
        ild:u32 
            $440:*<4>;
    stpr $442:i32 = 
        sub:i32 0x3:i32, 0x0:i32;
    stpr $443:i32 = 
        band:i32 
            $442:i32, 0x3:i32;
    stpr $444:i32 = 
        mul:i32 
            $443:i32, 0x8:i32;
    stpr $445:u32 = 
        lsr:u32 
            $441:u32, 
            $444:i32;
    stpr $446:u8 = 
        cvt:u8 
            $445:u32;
    stpr $447:u32 = 
        add:u32 
            $446:u8, 768:u32;
    stpr $448:u32 = 
        mul:u32 
            $447:u32, 4:u32;
    stpr $449:*<4> = 
        add:*<4> 
            lda fl_tab, 
            $448:u32;
    stpr $450:u32 = 
        ild:u32 
            $449:*<4>;
    stpr $451:u32 = 
        xor:u32 
            $438:u32, 
            $450:u32;
    ist:u32 = 
        $397:*<4>,
        xor:u32 
            $400:u32, 
            $451:u32;
    stpr $452:i32 = 
        mul:i32 0xd:i32, 0x4:i32;
    stpr $453:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $452:i32;
    stpr $454:i32 = 
        mul:i32 0x5:i32, 0x4:i32;
    stpr $455:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $454:i32;
    stpr $456:u32 = 
        ild:u32 
            $455:*<4>;
    stpr $457:i32 = 
        mul:i32 0xc:i32, 0x4:i32;
    stpr $458:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $457:i32;
    stpr $459:u32 = 
        ild:u32 
            $458:*<4>;
    ist:u32 = 
        $453:*<4>,
        xor:u32 
            $456:u32, 
            $459:u32;
    stpr $460:i32 = 
        mul:i32 0xe:i32, 0x4:i32;
    stpr $461:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $460:i32;
    stpr $462:i32 = 
        mul:i32 0x6:i32, 0x4:i32;
    stpr $463:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $462:i32;
    stpr $464:u32 = 
        ild:u32 
            $463:*<4>;
    stpr $465:i32 = 
        mul:i32 0xd:i32, 0x4:i32;
    stpr $466:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $465:i32;
    stpr $467:u32 = 
        ild:u32 
            $466:*<4>;
    ist:u32 = 
        $461:*<4>,
        xor:u32 
            $464:u32, 
            $467:u32;
    stpr $468:i32 = 
        mul:i32 0xf:i32, 0x4:i32;
    stpr $469:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $468:i32;
    stpr $470:i32 = 
        mul:i32 0x7:i32, 0x4:i32;
    stpr $471:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $470:i32;
    stpr $472:u32 = 
        ild:u32 
            $471:*<4>;
    stpr $473:i32 = 
        mul:i32 0xe:i32, 0x4:i32;
    stpr $474:*<4> = 
        add:*<4> 
            ld:*<4> kf, 
            $473:i32;
    stpr $475:u32 = 
        ild:u32 
            $474:*<4>;
    ist:u32 = 
        $469:*<4>,
        xor:u32 
            $472:u32, 
            $475:u32;
    stpr $476:i32 = 
        mul:i32 0x8:i32, 0x4:i32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 
            $476:i32;
    label _L23;
    truebr (
        lt:bool 
            ld:*<4> kf, 
            ld:*<4> kt), _L21;
    label _L22;
    label _L8;
    stpr $477:u8 = 
        ild:u8:520 
            ld:*<524> cx;
    stpr $478:i32 = 
        band:i32 
            $477:u8, 0x3:i32;
    falsebr (
        ne:bool 
            $478:i32, 0x1:i32), _L24;
    stpr $479:*<4> = 
        add:*<4> 
            ld:*<524> cx, 264:u32;
    stpr $480:u32 = 
        ild:u32:4 
            ld:*<524> cx;
    stpr $481:u32 = 
        mul:u32 
            $480:u32, 16:u32;
    st:*<4> kt = 
        add:*<4> 
            $479:*<4>, 
            $481:u32;
    st:*<4> kf = 
        add:*<524> 
            ld:*<524> cx, 8:u32;
    stpr $33:*<4> = 
        ld:*<4> kt;
    stpr $34:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $33:*<4>,
        ild:u32 
            $34:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $35:*<4> = 
        ld:*<4> kt;
    stpr $36:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $35:*<4>,
        ild:u32 
            $36:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $37:*<4> = 
        ld:*<4> kt;
    stpr $38:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $37:*<4>,
        ild:u32 
            $38:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $39:*<4> = 
        ld:*<4> kt;
    stpr $40:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $39:*<4>,
        ild:u32 
            $40:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    st:*<4> kt = 
        sub:*<4> 
            ld:*<4> kt, 0x20:i32;
    st:u32 i = 0x1:i32;
    label _L25;
    stpr $482:u32 = 
        ild:u32:4 
            ld:*<524> cx;
    falsebr (
        lt:bool 
            ld:u32 i, 
            $482:u32), _L26;
    stpr $41:*<4> = 
        ld:*<4> kt;
    stpr $483:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $484:u8 = 
        cvt:u8 
            $483:u32;
    stpr $485:u32 = 
        add:u32 
            $484:u8, 0:u32;
    stpr $486:u32 = 
        mul:u32 
            $485:u32, 4:u32;
    stpr $487:*<4> = 
        add:*<4> 
            lda im_tab, 
            $486:u32;
    stpr $488:u32 = 
        ild:u32 
            $487:*<4>;
    stpr $489:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $490:u32 = 
        lsr:u32 
            $489:u32, 0x8:i32;
    stpr $491:u8 = 
        cvt:u8 
            $490:u32;
    stpr $492:u32 = 
        add:u32 
            $491:u8, 256:u32;
    stpr $493:u32 = 
        mul:u32 
            $492:u32, 4:u32;
    stpr $494:*<4> = 
        add:*<4> 
            lda im_tab, 
            $493:u32;
    stpr $495:u32 = 
        ild:u32 
            $494:*<4>;
    stpr $496:u32 = 
        xor:u32 
            $488:u32, 
            $495:u32;
    stpr $497:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $498:u32 = 
        lsr:u32 
            $497:u32, 0x10:i32;
    stpr $499:u8 = 
        cvt:u8 
            $498:u32;
    stpr $500:u32 = 
        add:u32 
            $499:u8, 512:u32;
    stpr $501:u32 = 
        mul:u32 
            $500:u32, 4:u32;
    stpr $502:*<4> = 
        add:*<4> 
            lda im_tab, 
            $501:u32;
    stpr $503:u32 = 
        ild:u32 
            $502:*<4>;
    stpr $504:u32 = 
        xor:u32 
            $496:u32, 
            $503:u32;
    stpr $505:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $506:u32 = 
        lsr:u32 
            $505:u32, 0x18:i32;
    stpr $507:u8 = 
        cvt:u8 
            $506:u32;
    stpr $508:u32 = 
        add:u32 
            $507:u8, 768:u32;
    stpr $509:u32 = 
        mul:u32 
            $508:u32, 4:u32;
    stpr $510:*<4> = 
        add:*<4> 
            lda im_tab, 
            $509:u32;
    stpr $511:u32 = 
        ild:u32 
            $510:*<4>;
    ist:u32 = 
        $41:*<4>,
        xor:u32 
            $504:u32, 
            $511:u32;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    stpr $42:*<4> = 
        ld:*<4> kf;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $43:*<4> = 
        ld:*<4> kt;
    stpr $512:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $513:u8 = 
        cvt:u8 
            $512:u32;
    stpr $514:u32 = 
        add:u32 
            $513:u8, 0:u32;
    stpr $515:u32 = 
        mul:u32 
            $514:u32, 4:u32;
    stpr $516:*<4> = 
        add:*<4> 
            lda im_tab, 
            $515:u32;
    stpr $517:u32 = 
        ild:u32 
            $516:*<4>;
    stpr $518:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $519:u32 = 
        lsr:u32 
            $518:u32, 0x8:i32;
    stpr $520:u8 = 
        cvt:u8 
            $519:u32;
    stpr $521:u32 = 
        add:u32 
            $520:u8, 256:u32;
    stpr $522:u32 = 
        mul:u32 
            $521:u32, 4:u32;
    stpr $523:*<4> = 
        add:*<4> 
            lda im_tab, 
            $522:u32;
    stpr $524:u32 = 
        ild:u32 
            $523:*<4>;
    stpr $525:u32 = 
        xor:u32 
            $517:u32, 
            $524:u32;
    stpr $526:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $527:u32 = 
        lsr:u32 
            $526:u32, 0x10:i32;
    stpr $528:u8 = 
        cvt:u8 
            $527:u32;
    stpr $529:u32 = 
        add:u32 
            $528:u8, 512:u32;
    stpr $530:u32 = 
        mul:u32 
            $529:u32, 4:u32;
    stpr $531:*<4> = 
        add:*<4> 
            lda im_tab, 
            $530:u32;
    stpr $532:u32 = 
        ild:u32 
            $531:*<4>;
    stpr $533:u32 = 
        xor:u32 
            $525:u32, 
            $532:u32;
    stpr $534:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $535:u32 = 
        lsr:u32 
            $534:u32, 0x18:i32;
    stpr $536:u8 = 
        cvt:u8 
            $535:u32;
    stpr $537:u32 = 
        add:u32 
            $536:u8, 768:u32;
    stpr $538:u32 = 
        mul:u32 
            $537:u32, 4:u32;
    stpr $539:*<4> = 
        add:*<4> 
            lda im_tab, 
            $538:u32;
    stpr $540:u32 = 
        ild:u32 
            $539:*<4>;
    ist:u32 = 
        $43:*<4>,
        xor:u32 
            $533:u32, 
            $540:u32;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    stpr $44:*<4> = 
        ld:*<4> kf;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $45:*<4> = 
        ld:*<4> kt;
    stpr $541:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $542:u8 = 
        cvt:u8 
            $541:u32;
    stpr $543:u32 = 
        add:u32 
            $542:u8, 0:u32;
    stpr $544:u32 = 
        mul:u32 
            $543:u32, 4:u32;
    stpr $545:*<4> = 
        add:*<4> 
            lda im_tab, 
            $544:u32;
    stpr $546:u32 = 
        ild:u32 
            $545:*<4>;
    stpr $547:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $548:u32 = 
        lsr:u32 
            $547:u32, 0x8:i32;
    stpr $549:u8 = 
        cvt:u8 
            $548:u32;
    stpr $550:u32 = 
        add:u32 
            $549:u8, 256:u32;
    stpr $551:u32 = 
        mul:u32 
            $550:u32, 4:u32;
    stpr $552:*<4> = 
        add:*<4> 
            lda im_tab, 
            $551:u32;
    stpr $553:u32 = 
        ild:u32 
            $552:*<4>;
    stpr $554:u32 = 
        xor:u32 
            $546:u32, 
            $553:u32;
    stpr $555:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $556:u32 = 
        lsr:u32 
            $555:u32, 0x10:i32;
    stpr $557:u8 = 
        cvt:u8 
            $556:u32;
    stpr $558:u32 = 
        add:u32 
            $557:u8, 512:u32;
    stpr $559:u32 = 
        mul:u32 
            $558:u32, 4:u32;
    stpr $560:*<4> = 
        add:*<4> 
            lda im_tab, 
            $559:u32;
    stpr $561:u32 = 
        ild:u32 
            $560:*<4>;
    stpr $562:u32 = 
        xor:u32 
            $554:u32, 
            $561:u32;
    stpr $563:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $564:u32 = 
        lsr:u32 
            $563:u32, 0x18:i32;
    stpr $565:u8 = 
        cvt:u8 
            $564:u32;
    stpr $566:u32 = 
        add:u32 
            $565:u8, 768:u32;
    stpr $567:u32 = 
        mul:u32 
            $566:u32, 4:u32;
    stpr $568:*<4> = 
        add:*<4> 
            lda im_tab, 
            $567:u32;
    stpr $569:u32 = 
        ild:u32 
            $568:*<4>;
    ist:u32 = 
        $45:*<4>,
        xor:u32 
            $562:u32, 
            $569:u32;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    stpr $46:*<4> = 
        ld:*<4> kf;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $47:*<4> = 
        ld:*<4> kt;
    stpr $570:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $571:u8 = 
        cvt:u8 
            $570:u32;
    stpr $572:u32 = 
        add:u32 
            $571:u8, 0:u32;
    stpr $573:u32 = 
        mul:u32 
            $572:u32, 4:u32;
    stpr $574:*<4> = 
        add:*<4> 
            lda im_tab, 
            $573:u32;
    stpr $575:u32 = 
        ild:u32 
            $574:*<4>;
    stpr $576:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $577:u32 = 
        lsr:u32 
            $576:u32, 0x8:i32;
    stpr $578:u8 = 
        cvt:u8 
            $577:u32;
    stpr $579:u32 = 
        add:u32 
            $578:u8, 256:u32;
    stpr $580:u32 = 
        mul:u32 
            $579:u32, 4:u32;
    stpr $581:*<4> = 
        add:*<4> 
            lda im_tab, 
            $580:u32;
    stpr $582:u32 = 
        ild:u32 
            $581:*<4>;
    stpr $583:u32 = 
        xor:u32 
            $575:u32, 
            $582:u32;
    stpr $584:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $585:u32 = 
        lsr:u32 
            $584:u32, 0x10:i32;
    stpr $586:u8 = 
        cvt:u8 
            $585:u32;
    stpr $587:u32 = 
        add:u32 
            $586:u8, 512:u32;
    stpr $588:u32 = 
        mul:u32 
            $587:u32, 4:u32;
    stpr $589:*<4> = 
        add:*<4> 
            lda im_tab, 
            $588:u32;
    stpr $590:u32 = 
        ild:u32 
            $589:*<4>;
    stpr $591:u32 = 
        xor:u32 
            $583:u32, 
            $590:u32;
    stpr $592:u32 = 
        ild:u32 
            ld:*<4> kf;
    stpr $593:u32 = 
        lsr:u32 
            $592:u32, 0x18:i32;
    stpr $594:u8 = 
        cvt:u8 
            $593:u32;
    stpr $595:u32 = 
        add:u32 
            $594:u8, 768:u32;
    stpr $596:u32 = 
        mul:u32 
            $595:u32, 4:u32;
    stpr $597:*<4> = 
        add:*<4> 
            lda im_tab, 
            $596:u32;
    stpr $598:u32 = 
        ild:u32 
            $597:*<4>;
    ist:u32 = 
        $47:*<4>,
        xor:u32 
            $591:u32, 
            $598:u32;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    stpr $48:*<4> = 
        ld:*<4> kf;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    st:*<4> kt = 
        sub:*<4> 
            ld:*<4> kt, 0x20:i32;
    st:u32 i = 
        add:u32 
            ld:u32 i, 1:u32;
    goto _L25;
    label _L26;
    stpr $49:*<4> = 
        ld:*<4> kt;
    stpr $50:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $49:*<4>,
        ild:u32 
            $50:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $51:*<4> = 
        ld:*<4> kt;
    stpr $52:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $51:*<4>,
        ild:u32 
            $52:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $53:*<4> = 
        ld:*<4> kt;
    stpr $54:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $53:*<4>,
        ild:u32 
            $54:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    stpr $55:*<4> = 
        ld:*<4> kt;
    stpr $56:*<4> = 
        ld:*<4> kf;
    ist:u32 = 
        $55:*<4>,
        ild:u32 
            $56:*<4>;
    st:*<4> kt = 
        add:*<4> 
            ld:*<4> kt, 4:u32;
    st:*<4> kf = 
        add:*<4> 
            ld:*<4> kf, 4:u32;
    label _L24;
    return 0x1:i32;
}; //end function region.
} //end program region.
