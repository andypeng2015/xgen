
==---- DUMP Vectorization 'bar' ----==
  ==-- DUMP VectCtx --==
    LOOP1 HEAD:BB2, BODY(2):2,3,
    ==-- DUMP IVBoundInfo --==
      BIV1(STMTOCC:MD17,'j')(EXPOCC:MD17,'j')
        INIT-VAL:INT:0
        STEP-VAL:INT:1
        REDUCTION-STMT:
          st:i32 'j' attachinfo:Dbx,MDSSA              
              add:i32                  
                  ld:i32 'j' attachinfo:Dbx,MDSSA                  
                  intconst:i32 1|0x1
        REDUCTION-EXP:
          ld:i32 'j' attachinfo:Dbx,MDSSA
        INIT-STMT:
          st:i32 'j' attachinfo:Dbx,MDSSA              
              intconst:i32 0|0x0 attachinfo:Dbx
      TRIPCOUNT IS IMM:10
      INIT_VAL IS IMM:0
      END_VAL IS IMM:10
      STEP IS:INT:1
    ==-- DUMP VectAccDescMgr --==
      THERE ARE 2 RECOGNIZED VECTOR OPERATION
      ----
      ist:i32 attachinfo:Dbx,MDSSA          
          add:*<4> attachinfo:Dbx              
              lda:*<40> 'arr' attachinfo:Dbx              
              $26:u32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $15:i32              
              $29:i32
        -- VectAccDesc --
          OCC:
            ist:i32 attachinfo:Dbx,MDSSA                
                add:*<4> attachinfo:Dbx                    
                    lda:*<40> 'arr' attachinfo:Dbx                    
                    $26:u32 attachinfo:Dbx                
                add:i32 attachinfo:Dbx                    
                    $15:i32                    
                    $29:i32
          LINEARREP:
            IV:
              DIV12(STMTOCC:MD44,'$26')
                INIT-VAL:EXP:
                  mul:u32                      
                      add:i32                          
                          add:i32                              
                              $23:i32                              
                              add:i32                                  
                                  $21:i32                                  
                                  $19:i32                          
                          intconst:i32 3|0x3                      
                      intconst:u32 4|0x4
                STEP-VAL:INT:4
                REDUCTION-STMT:
                  stpr $26:u32 attachinfo:Dbx                      
                      mul:u32 attachinfo:Dbx                          
                          $25:i32 attachinfo:Dbx                          
                          intconst:u32 4|0x4
                LINEAR-REP:
                  ChainRec(id:11):
                    INIT:EXP:
                    mul:u32                        
                        add:i32                            
                            add:i32                                
                                $23:i32                                
                                add:i32                                    
                                    $21:i32                                    
                                    $19:i32                            
                            intconst:i32 3|0x3                        
                        intconst:u32 4|0x4
                    CODE:add
                    STEP:INT:4
            COEFF:
              intconst:i32 1|0x1
            VAR:
              $26:u32 attachinfo:Dbx
            + ADDEND:
              lda:*<40> 'arr' attachinfo:Dbx
      ----
      ild:i32 attachinfo:MDSSA,Dbx          
          $14:*<4> attachinfo:Dbx
        -- VectAccDesc --
          OCC:
            ild:i32 attachinfo:MDSSA,Dbx                
                $14:*<4> attachinfo:Dbx
          LINEARREP:
            IV:
              DIV7(STMTOCC:MD32,'$14')
                INIT-VAL:EXP:
                  add:u32                      
                      lda:*<40> 'arr' attachinfo:Dbx                      
                      mul:u32                          
                          add:i32                              
                              add:i32                                  
                                  $10:i32                                  
                                  add:i32                                      
                                      $8:i32                                      
                                      $6:i32                              
                              intconst:i32 3|0x3                          
                          intconst:i32 4|0x4
                STEP-VAL:INT:4
                REDUCTION-STMT:
                  stpr $14:*<4> attachinfo:Dbx                      
                      add:*<4> attachinfo:Dbx                          
                          lda:*<40> 'arr' attachinfo:Dbx                          
                          $13:u32 attachinfo:Dbx
                LINEAR-REP:
                  ChainRec(id:6):
                    INIT:EXP:
                    add:u32                        
                        lda:*<40> 'arr' attachinfo:Dbx                        
                        mul:u32                            
                            add:i32                                
                                add:i32                                    
                                    $10:i32                                    
                                    add:i32                                        
                                        $8:i32                                        
                                        $6:i32                                
                                intconst:i32 3|0x3                            
                            intconst:i32 4|0x4
                    CODE:add
                    STEP:INT:4
            COEFF:
              intconst:u32 1|0x1
            VAR:
              $14:*<4> attachinfo:Dbx
            NOADDEND
    -- CAND STMT LIST --
      stpr $7:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $6:i32 attachinfo:Dbx              
              ld:i32 'j' attachinfo:Dbx,MDSSA
      stpr $9:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $7:i32 attachinfo:Dbx              
              $8:i32 attachinfo:Dbx
      stpr $11:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $9:i32 attachinfo:Dbx              
              $10:i32 attachinfo:Dbx
      stpr $12:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $11:i32 attachinfo:Dbx              
              intconst:i32 3|0x3 attachinfo:Dbx
      stpr $13:u32 attachinfo:Dbx          
          mul:u32 attachinfo:Dbx              
              $12:i32 attachinfo:Dbx              
              intconst:u32 4|0x4
      stpr $14:*<4> attachinfo:Dbx          
          add:*<4> attachinfo:Dbx              
              lda:*<40> 'arr' attachinfo:Dbx              
              $13:u32 attachinfo:Dbx
      stpr $15:i32 attachinfo:Dbx          
          ild:i32 attachinfo:MDSSA,Dbx              
              $14:*<4> attachinfo:Dbx
      stpr $20:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $19:i32 attachinfo:Dbx              
              ld:i32 'j' attachinfo:Dbx,MDSSA
      stpr $22:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $20:i32 attachinfo:Dbx              
              $21:i32 attachinfo:Dbx
      stpr $24:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $22:i32 attachinfo:Dbx              
              $23:i32 attachinfo:Dbx
      stpr $25:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $24:i32 attachinfo:Dbx              
              intconst:i32 3|0x3 attachinfo:Dbx
      stpr $26:u32 attachinfo:Dbx          
          mul:u32 attachinfo:Dbx              
              $25:i32 attachinfo:Dbx              
              intconst:u32 4|0x4
      ist:i32 attachinfo:Dbx,MDSSA          
          add:*<4> attachinfo:Dbx              
              lda:*<40> 'arr' attachinfo:Dbx              
              $26:u32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $15:i32              
              $29:i32
    -- PREREQUISITE STMT LIST --
      stpr $7:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $6:i32 attachinfo:Dbx              
              ld:i32 'j' attachinfo:Dbx,MDSSA
      stpr $9:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $7:i32 attachinfo:Dbx              
              $8:i32 attachinfo:Dbx
      stpr $11:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $9:i32 attachinfo:Dbx              
              $10:i32 attachinfo:Dbx
      stpr $12:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $11:i32 attachinfo:Dbx              
              intconst:i32 3|0x3 attachinfo:Dbx
      stpr $13:u32 attachinfo:Dbx          
          mul:u32 attachinfo:Dbx              
              $12:i32 attachinfo:Dbx              
              intconst:u32 4|0x4
      stpr $14:*<4> attachinfo:Dbx          
          add:*<4> attachinfo:Dbx              
              lda:*<40> 'arr' attachinfo:Dbx              
              $13:u32 attachinfo:Dbx
      stpr $15:i32 attachinfo:Dbx          
          ild:i32 attachinfo:MDSSA,Dbx              
              $14:*<4> attachinfo:Dbx
      stpr $20:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $19:i32 attachinfo:Dbx              
              ld:i32 'j' attachinfo:Dbx,MDSSA
      stpr $22:i32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $20:i32 attachinfo:Dbx              
              $21:i32 attachinfo:Dbx
      stpr $24:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $22:i32 attachinfo:Dbx              
              $23:i32 attachinfo:Dbx
      stpr $25:i32 attachinfo:Dbx          
          sub:i32 attachinfo:Dbx              
              $24:i32 attachinfo:Dbx              
              intconst:i32 3|0x3 attachinfo:Dbx
      stpr $26:u32 attachinfo:Dbx          
          mul:u32 attachinfo:Dbx              
              $25:i32 attachinfo:Dbx              
              intconst:u32 4|0x4
    -- RESULT-CAND STMT LIST --
      ist:i32 attachinfo:Dbx,MDSSA          
          add:*<4> attachinfo:Dbx              
              lda:*<40> 'arr' attachinfo:Dbx              
              $26:u32 attachinfo:Dbx          
          add:i32 attachinfo:Dbx              
              $15:i32              
              $29:i32
    -- MADE CAND VECT-OP DESCRIPTOR --
      VECTOP id:1
        VECTOPCODE:ist
        OCC:
          ist:i32 attachinfo:Dbx,MDSSA              
              add:*<4> attachinfo:Dbx                  
                  lda:*<40> 'arr' attachinfo:Dbx                  
                  $26:u32 attachinfo:Dbx              
              add:i32 attachinfo:Dbx                  
                  $15:i32                  
                  $29:i32
        EXPECTED_TYPE:
          vec<i32*10>
        OPND:
          VECTOP id:2
            VECTOPCODE:add
            OCC:
              add:i32 attachinfo:Dbx                  
                  $15:i32                  
                  $29:i32
            EXPECTED_TYPE:
              vec<i32*10>
            OPND:
              VECTOP id:3
                VECTOPCODE:ild
                OCC:
                  ild:i32 attachinfo:MDSSA,Dbx                      
                      $14:*<4> attachinfo:Dbx
                EXPECTED_TYPE:
                  vec<i32*10>
                OPND:
              VECTOP id:4
                VECTOPCODE:pr
                OCC:
                  $29:i32
                EXPECTED_TYPE:
                  vec<i32*10>
                OPND:
    -- GENERATED VECTOR STMT LIST --
      stpr $38:vec<i32*10>          
          add:vec<i32*10>              
              ild:vec<i32*10> attachinfo:Dbx                  
                  $14:*<4> attachinfo:Dbx              
              $29:i32
      ist:vec<i32*10>          
          add:*<4> attachinfo:Dbx              
              lda:*<40> 'arr' attachinfo:Dbx              
              $26:u32 attachinfo:Dbx          
          $38:vec<i32*10>
==-- DUMP ALL ACT --==
  ACT1:GID8:Find IV boundary of LOOP1 is:
    ==-- DUMP IVBoundInfo --==
      BIV1(STMTOCC:MD17,'j')(EXPOCC:MD17,'j')
        INIT-VAL:INT:0
        STEP-VAL:INT:1
        REDUCTION-STMT:
          st:i32 'j' attachinfo:Dbx,MDSSA            
              add:i32                
                  ld:i32 'j' attachinfo:Dbx,MDSSA                
                  intconst:i32 1|0x1
        REDUCTION-EXP:
          ld:i32 'j' attachinfo:Dbx,MDSSA
        INIT-STMT:
          st:i32 'j' attachinfo:Dbx,MDSSA            
              intconst:i32 0|0x0 attachinfo:Dbx
      TRIPCOUNT IS IMM:10
      INIT_VAL IS IMM:0
      END_VAL IS IMM:10
      STEP IS:INT:1
  ACT2:GID9:Vectorization uses LICM info to determine whether an operation can be vectorized.
  ACT3:GID10:Found Loop Dependence:reason:ild and ist access same memory location, thus they have loop-independent dependence

      [8]        arr[m*7+61*x*y+2*j/2+19*y-z*11-3] = arr[m*7+61*x*y+2*j/2+19*y-z*11-3] + sum;
      
      stpr $15:i32 attachinfo:Dbx        
          ild:i32 attachinfo:MDSSA,Dbx            
              $14:*<4> attachinfo:Dbx
  ACT4:GID11:VECTORIZE:isSuitableToBeVect:scalar expression is loop variant, it may prevent vectorization
      $15:i32
  ACT5:GID12:VECTORIZE:findSuitableVectOpnd:seems IR is unsuitable to be vector operand, try more analysis through DU chain
      $15:i32
  ACT6:GID13:VECTORIZE:findSuitableVectOpnd:find the appropriate vector operand
      ild:i32 attachinfo:MDSSA,Dbx        
          $14:*<4> attachinfo:Dbx
  ACT7:GID14:VECTORIZE:findSuitableVectOpnd:find the appropriate vector operand
      $29:i32
  ACT8:GID15:VECTORIZE:scalar operation has been regarded as vector operand
      $29:i32
  ACT9:GID16:VECTORIZE:generate stpr operation to hold the intermediate value:
      add:vec<i32*10>        
          ild:vec<i32*10> attachinfo:Dbx            
              $14:*<4> attachinfo:Dbx        
          $29:i32
  ACT10:GID17:'falsebr' will be changed, however it is IV, so IVR will be invalided.
